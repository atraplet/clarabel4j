// Generated by jextract

package com.ustermetrics.clarabel4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ClarabelCscMatrix_f64 {
 *     uintptr_t m;
 *     uintptr_t n;
 *     const uintptr_t *colptr;
 *     const uintptr_t *rowval;
 *     const double *nzval;
 * }
 * }
 */
public class ClarabelCscMatrix_f64 {

    ClarabelCscMatrix_f64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clarabel_h.C_LONG_LONG.withName("m"),
        Clarabel_h.C_LONG_LONG.withName("n"),
        Clarabel_h.C_POINTER.withName("colptr"),
        Clarabel_h.C_POINTER.withName("rowval"),
        Clarabel_h.C_POINTER.withName("nzval")
    ).withName("ClarabelCscMatrix_f64");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong m$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t m
     * }
     */
    public static final OfLong m$layout() {
        return m$LAYOUT;
    }

    private static final long m$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t m
     * }
     */
    public static final long m$offset() {
        return m$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t m
     * }
     */
    public static long m(MemorySegment struct) {
        return struct.get(m$LAYOUT, m$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t m
     * }
     */
    public static void m(MemorySegment struct, long fieldValue) {
        struct.set(m$LAYOUT, m$OFFSET, fieldValue);
    }

    private static final OfLong n$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t n
     * }
     */
    public static final OfLong n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t n
     * }
     */
    public static long n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t n
     * }
     */
    public static void n(MemorySegment struct, long fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final AddressLayout colptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("colptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uintptr_t *colptr
     * }
     */
    public static final AddressLayout colptr$layout() {
        return colptr$LAYOUT;
    }

    private static final long colptr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uintptr_t *colptr
     * }
     */
    public static final long colptr$offset() {
        return colptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uintptr_t *colptr
     * }
     */
    public static MemorySegment colptr(MemorySegment struct) {
        return struct.get(colptr$LAYOUT, colptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uintptr_t *colptr
     * }
     */
    public static void colptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(colptr$LAYOUT, colptr$OFFSET, fieldValue);
    }

    private static final AddressLayout rowval$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rowval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uintptr_t *rowval
     * }
     */
    public static final AddressLayout rowval$layout() {
        return rowval$LAYOUT;
    }

    private static final long rowval$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uintptr_t *rowval
     * }
     */
    public static final long rowval$offset() {
        return rowval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uintptr_t *rowval
     * }
     */
    public static MemorySegment rowval(MemorySegment struct) {
        return struct.get(rowval$LAYOUT, rowval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uintptr_t *rowval
     * }
     */
    public static void rowval(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rowval$LAYOUT, rowval$OFFSET, fieldValue);
    }

    private static final AddressLayout nzval$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nzval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const double *nzval
     * }
     */
    public static final AddressLayout nzval$layout() {
        return nzval$LAYOUT;
    }

    private static final long nzval$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const double *nzval
     * }
     */
    public static final long nzval$offset() {
        return nzval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const double *nzval
     * }
     */
    public static MemorySegment nzval(MemorySegment struct) {
        return struct.get(nzval$LAYOUT, nzval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const double *nzval
     * }
     */
    public static void nzval(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nzval$LAYOUT, nzval$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

