// Generated by jextract

package com.ustermetrics.clarabel4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ClarabelDefaultSolution_f64 {
 *     double *x;
 *     uintptr_t x_length;
 *     double *z;
 *     uintptr_t z_length;
 *     double *s;
 *     uintptr_t s_length;
 *     ClarabelSolverStatus status;
 *     double obj_val;
 *     double obj_val_dual;
 *     double solve_time;
 *     uint32_t iterations;
 *     double r_prim;
 *     double r_dual;
 * }
 * }
 */
public class ClarabelDefaultSolution_f64 {

    ClarabelDefaultSolution_f64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clarabel_h.C_POINTER.withName("x"),
        Clarabel_h.C_LONG.withName("x_length"),
        Clarabel_h.C_POINTER.withName("z"),
        Clarabel_h.C_LONG.withName("z_length"),
        Clarabel_h.C_POINTER.withName("s"),
        Clarabel_h.C_LONG.withName("s_length"),
        Clarabel_h.C_INT.withName("status"),
        MemoryLayout.paddingLayout(4),
        Clarabel_h.C_DOUBLE.withName("obj_val"),
        Clarabel_h.C_DOUBLE.withName("obj_val_dual"),
        Clarabel_h.C_DOUBLE.withName("solve_time"),
        Clarabel_h.C_INT.withName("iterations"),
        MemoryLayout.paddingLayout(4),
        Clarabel_h.C_DOUBLE.withName("r_prim"),
        Clarabel_h.C_DOUBLE.withName("r_dual")
    ).withName("ClarabelDefaultSolution_f64");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout x$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double *x
     * }
     */
    public static final AddressLayout x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double *x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double *x
     * }
     */
    public static MemorySegment x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double *x
     * }
     */
    public static void x(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfLong x_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("x_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t x_length
     * }
     */
    public static final OfLong x_length$layout() {
        return x_length$LAYOUT;
    }

    private static final long x_length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t x_length
     * }
     */
    public static final long x_length$offset() {
        return x_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t x_length
     * }
     */
    public static long x_length(MemorySegment struct) {
        return struct.get(x_length$LAYOUT, x_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t x_length
     * }
     */
    public static void x_length(MemorySegment struct, long fieldValue) {
        struct.set(x_length$LAYOUT, x_length$OFFSET, fieldValue);
    }

    private static final AddressLayout z$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double *z
     * }
     */
    public static final AddressLayout z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double *z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double *z
     * }
     */
    public static MemorySegment z(MemorySegment struct) {
        return struct.get(z$LAYOUT, z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double *z
     * }
     */
    public static void z(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(z$LAYOUT, z$OFFSET, fieldValue);
    }

    private static final OfLong z_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("z_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t z_length
     * }
     */
    public static final OfLong z_length$layout() {
        return z_length$LAYOUT;
    }

    private static final long z_length$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t z_length
     * }
     */
    public static final long z_length$offset() {
        return z_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t z_length
     * }
     */
    public static long z_length(MemorySegment struct) {
        return struct.get(z_length$LAYOUT, z_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t z_length
     * }
     */
    public static void z_length(MemorySegment struct, long fieldValue) {
        struct.set(z_length$LAYOUT, z_length$OFFSET, fieldValue);
    }

    private static final AddressLayout s$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double *s
     * }
     */
    public static final AddressLayout s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double *s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double *s
     * }
     */
    public static MemorySegment s(MemorySegment struct) {
        return struct.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double *s
     * }
     */
    public static void s(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final OfLong s_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("s_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t s_length
     * }
     */
    public static final OfLong s_length$layout() {
        return s_length$LAYOUT;
    }

    private static final long s_length$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t s_length
     * }
     */
    public static final long s_length$offset() {
        return s_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t s_length
     * }
     */
    public static long s_length(MemorySegment struct) {
        return struct.get(s_length$LAYOUT, s_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t s_length
     * }
     */
    public static void s_length(MemorySegment struct, long fieldValue) {
        struct.set(s_length$LAYOUT, s_length$OFFSET, fieldValue);
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ClarabelSolverStatus status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ClarabelSolverStatus status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ClarabelSolverStatus status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ClarabelSolverStatus status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    private static final OfDouble obj_val$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("obj_val"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double obj_val
     * }
     */
    public static final OfDouble obj_val$layout() {
        return obj_val$LAYOUT;
    }

    private static final long obj_val$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double obj_val
     * }
     */
    public static final long obj_val$offset() {
        return obj_val$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double obj_val
     * }
     */
    public static double obj_val(MemorySegment struct) {
        return struct.get(obj_val$LAYOUT, obj_val$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double obj_val
     * }
     */
    public static void obj_val(MemorySegment struct, double fieldValue) {
        struct.set(obj_val$LAYOUT, obj_val$OFFSET, fieldValue);
    }

    private static final OfDouble obj_val_dual$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("obj_val_dual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double obj_val_dual
     * }
     */
    public static final OfDouble obj_val_dual$layout() {
        return obj_val_dual$LAYOUT;
    }

    private static final long obj_val_dual$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double obj_val_dual
     * }
     */
    public static final long obj_val_dual$offset() {
        return obj_val_dual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double obj_val_dual
     * }
     */
    public static double obj_val_dual(MemorySegment struct) {
        return struct.get(obj_val_dual$LAYOUT, obj_val_dual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double obj_val_dual
     * }
     */
    public static void obj_val_dual(MemorySegment struct, double fieldValue) {
        struct.set(obj_val_dual$LAYOUT, obj_val_dual$OFFSET, fieldValue);
    }

    private static final OfDouble solve_time$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("solve_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double solve_time
     * }
     */
    public static final OfDouble solve_time$layout() {
        return solve_time$LAYOUT;
    }

    private static final long solve_time$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double solve_time
     * }
     */
    public static final long solve_time$offset() {
        return solve_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double solve_time
     * }
     */
    public static double solve_time(MemorySegment struct) {
        return struct.get(solve_time$LAYOUT, solve_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double solve_time
     * }
     */
    public static void solve_time(MemorySegment struct, double fieldValue) {
        struct.set(solve_time$LAYOUT, solve_time$OFFSET, fieldValue);
    }

    private static final OfInt iterations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iterations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t iterations
     * }
     */
    public static final OfInt iterations$layout() {
        return iterations$LAYOUT;
    }

    private static final long iterations$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t iterations
     * }
     */
    public static final long iterations$offset() {
        return iterations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t iterations
     * }
     */
    public static int iterations(MemorySegment struct) {
        return struct.get(iterations$LAYOUT, iterations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t iterations
     * }
     */
    public static void iterations(MemorySegment struct, int fieldValue) {
        struct.set(iterations$LAYOUT, iterations$OFFSET, fieldValue);
    }

    private static final OfDouble r_prim$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("r_prim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double r_prim
     * }
     */
    public static final OfDouble r_prim$layout() {
        return r_prim$LAYOUT;
    }

    private static final long r_prim$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double r_prim
     * }
     */
    public static final long r_prim$offset() {
        return r_prim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double r_prim
     * }
     */
    public static double r_prim(MemorySegment struct) {
        return struct.get(r_prim$LAYOUT, r_prim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double r_prim
     * }
     */
    public static void r_prim(MemorySegment struct, double fieldValue) {
        struct.set(r_prim$LAYOUT, r_prim$OFFSET, fieldValue);
    }

    private static final OfDouble r_dual$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("r_dual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double r_dual
     * }
     */
    public static final OfDouble r_dual$layout() {
        return r_dual$LAYOUT;
    }

    private static final long r_dual$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double r_dual
     * }
     */
    public static final long r_dual$offset() {
        return r_dual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double r_dual
     * }
     */
    public static double r_dual(MemorySegment struct) {
        return struct.get(r_dual$LAYOUT, r_dual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double r_dual
     * }
     */
    public static void r_dual(MemorySegment struct, double fieldValue) {
        struct.set(r_dual$LAYOUT, r_dual$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

