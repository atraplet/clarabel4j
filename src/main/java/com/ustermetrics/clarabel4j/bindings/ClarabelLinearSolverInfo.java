// Generated by jextract

package com.ustermetrics.clarabel4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ClarabelLinearSolverInfo {
 *     ClarabelDirectSolveMethods name;
 *     uint32_t threads;
 *     bool direct;
 *     uint32_t nnzA;
 *     uint32_t nnzL;
 *     enum ClarabelSolverStatus status;
 * }
 * }
 */
public class ClarabelLinearSolverInfo {

    ClarabelLinearSolverInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Clarabel_h.C_INT.withName("name"),
        Clarabel_h.C_INT.withName("threads"),
        Clarabel_h.C_BOOL.withName("direct"),
        MemoryLayout.paddingLayout(3),
        Clarabel_h.C_INT.withName("nnzA"),
        Clarabel_h.C_INT.withName("nnzL"),
        Clarabel_h.C_INT.withName("status")
    ).withName("ClarabelLinearSolverInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt name$LAYOUT = (OfInt)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ClarabelDirectSolveMethods name
     * }
     */
    public static final OfInt name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ClarabelDirectSolveMethods name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ClarabelDirectSolveMethods name
     * }
     */
    public static int name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ClarabelDirectSolveMethods name
     * }
     */
    public static void name(MemorySegment struct, int fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t threads
     * }
     */
    public static final OfInt threads$layout() {
        return threads$LAYOUT;
    }

    private static final long threads$OFFSET = $LAYOUT.byteOffset(groupElement("threads"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t threads
     * }
     */
    public static final long threads$offset() {
        return threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t threads
     * }
     */
    public static int threads(MemorySegment struct) {
        return struct.get(threads$LAYOUT, threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t threads
     * }
     */
    public static void threads(MemorySegment struct, int fieldValue) {
        struct.set(threads$LAYOUT, threads$OFFSET, fieldValue);
    }

    private static final OfBoolean direct$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("direct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool direct
     * }
     */
    public static final OfBoolean direct$layout() {
        return direct$LAYOUT;
    }

    private static final long direct$OFFSET = $LAYOUT.byteOffset(groupElement("direct"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool direct
     * }
     */
    public static final long direct$offset() {
        return direct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool direct
     * }
     */
    public static boolean direct(MemorySegment struct) {
        return struct.get(direct$LAYOUT, direct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool direct
     * }
     */
    public static void direct(MemorySegment struct, boolean fieldValue) {
        struct.set(direct$LAYOUT, direct$OFFSET, fieldValue);
    }

    private static final OfInt nnzA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nnzA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t nnzA
     * }
     */
    public static final OfInt nnzA$layout() {
        return nnzA$LAYOUT;
    }

    private static final long nnzA$OFFSET = $LAYOUT.byteOffset(groupElement("nnzA"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t nnzA
     * }
     */
    public static final long nnzA$offset() {
        return nnzA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t nnzA
     * }
     */
    public static int nnzA(MemorySegment struct) {
        return struct.get(nnzA$LAYOUT, nnzA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t nnzA
     * }
     */
    public static void nnzA(MemorySegment struct, int fieldValue) {
        struct.set(nnzA$LAYOUT, nnzA$OFFSET, fieldValue);
    }

    private static final OfInt nnzL$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nnzL"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t nnzL
     * }
     */
    public static final OfInt nnzL$layout() {
        return nnzL$LAYOUT;
    }

    private static final long nnzL$OFFSET = $LAYOUT.byteOffset(groupElement("nnzL"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t nnzL
     * }
     */
    public static final long nnzL$offset() {
        return nnzL$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t nnzL
     * }
     */
    public static int nnzL(MemorySegment struct) {
        return struct.get(nnzL$LAYOUT, nnzL$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t nnzL
     * }
     */
    public static void nnzL(MemorySegment struct, int fieldValue) {
        struct.set(nnzL$LAYOUT, nnzL$OFFSET, fieldValue);
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ClarabelSolverStatus status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = $LAYOUT.byteOffset(groupElement("status"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ClarabelSolverStatus status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ClarabelSolverStatus status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ClarabelSolverStatus status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

